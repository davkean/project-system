# Name: DotNet-Project-System
# URL: https://dev.azure.com/devdiv/DevDiv/_build?definitionId=9675
#
# Responsible for producing the signed product build for insertion into the Visual Studio repository
#
# NOTE: triggers for this build are defined in the Web UI instead of here in the YAML file so they
#       apply to all branches.

resources:
- repo: self
  clean: true
queue:
  name: VSEng-MicroBuildVS2019
  demands: Cmd
  timeoutInMinutes: 90
variables:
  BuildConfiguration: Release
  TeamName: DotNet-Project-System
  BuildPlatform: any cpu
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  
steps:
- task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
  displayName: Install Signing Plugin
  inputs:
    signType: real
    esrpSigning: true
    
- task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1
  displayName: Install Swix Plugin
  
- task: NuGetRestore@1
  displayName: Restore 'Microsoft.DotNet.IBCMerge' package
  inputs:
    solution: 'build\proj\internal\RestoreIBCMerge.csproj'
    feed: '8f470c7e-ac49-4afe-a6ee-cf784e438b93'

- script: $(Build.SourcesDirectory)\build.cmd /build /test /ci /sign /diagnostic /no-deploy /no-integration /ibc /no-clearnugetcache /configuration $(BuildConfiguration)
  displayName: Build ProjectSystem.sln

- task: Ref12.ref12-analyze-task.ref12-analyze-task.Ref12Analyze@0
  displayName: Produce Codex index for http://index
  inputs:
    workflowArguments: |
     /sourcesDirectory:$(Build.SourcesDirectory) 
     /codexRepoUrl:$(Build.Repository.Uri) 
     /repoName:$(Build.Repository.Name)
     /additionalCodexArguments:-bld  
     /additionalCodexArguments:$(Build.SourcesDirectory)\artifacts\Release\log
  condition: succeeded()
  continueOnError: true

- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testRunner: XUnit
    testResultsFiles: 'artifacts/$(BuildConfiguration)/TestResults/*.xml'
    testRunTitle: 'Unit Test Results'
  condition: succeededOrFailed()

- task: PowerShell@2
  inputs:
    filePath: build\variables\_vsts.ps1
    failOnStderr: true
  displayName: Set VSTS variables based on source 

# Symbols is the one thing we cannot declare in the ps1 artifact scripts due to the extra steps
# needed and the specific order it has to be performed in. Copy -> Publish Symbols -> Publish
# Artifact -> publish to symweb

#TODO change the targetfolder - perhaps use ArtifactStagingDirectory variable
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)'
    Contents: |
      **/Microsoft.VisualStudio.ProjectSystem.Managed?(*.pdb|*.dll|*.xml)
      **/Microsoft.VisualStudio.AppDesigner?(*.pdb|*.dll|*.xml)
      **/Microsoft.VisualStudio.Editors?(*.pdb|*.dll|*.xml)
    TargetFolder: $(Build.ArtifactStagingDirectory)/symbols
  displayName: Copy symbols

- task: PublishSymbols@2
  displayName: Archive symbols to VSTS
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols
    SearchPattern: 
      '**/*.pdb
      **/*.dll
      **/*.exe'
    SymbolServerType: TeamServices
    SkipIndexing: true
    SymbolsProduct: 'Roslyn Project System'
    SymbolsVersion: '$(Build.BuildNumber)'
    SymbolsArtifactName: Symbols
  continueOnError: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/symbols'
    ArtifactName: symbols
    publishLocation: Container
  displayName: 'Publish Artifact: symbols'
  
- task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
  displayName: Publish Symbols to Artifact Services (symweb)
  inputs:
    symbolServiceURI: 'https://microsoft.artifacts.visualstudio.com/DefaultCollection'
    requestName: '$(system.teamProject)/$(Build.DefinitionName)/$(Build.BuildNumber)/$(Build.BuildId)'
    sourcePath: $(Build.ArtifactStagingDirectory)/symbols
    usePat: false
    
- task: ms-vseng.MicroBuildTasks.4305a8de-ba66-4d8b-b2d1-0dc4ecbbf5e8.MicroBuildUploadVstsDropFolder@1
  displayName: Upload VSTS Drop
  inputs:
    DropFolder: 'artifacts\$(BuildConfiguration)\VSSetup\Insertion'

#TODO deprecate this with PublishBuildArtifacts@1
- task: CopyPublishBuildArtifacts@1
  displayName: Publish Drop
  inputs:
    CopyRoot: '$(Build.SourcesDirectory)'
    Contents: |
     artifacts\$(BuildConfiguration)\bin
     artifacts\$(BuildConfiguration)\DevDivInsertionFiles
     artifacts\$(BuildConfiguration)\log
     artifacts\$(BuildConfiguration)\packages
     artifacts\$(BuildConfiguration)\VSSetup
     artifacts\$(BuildConfiguration)\TestResults
    ArtifactName: '$(Build.BuildNumber)'
    ArtifactType: Container
  condition: succeededOrFailed()

- task: NuGetPublisher@0
  displayName: NuGet Publisher - Roslyn Myget
  inputs:
    searchPattern: 'artifacts\$(BuildConfiguration)\packages\*.nupkg'
    connectedServiceName: 'Roslyn - Myget'
    nuGetVersion: 4.0.0.2283

- task: NuGetCommand@2
  displayName: NuGet CoreXT publish
  inputs:
    command: push
    packagesToPush: 'artifacts\$(BuildConfiguration)\packages\*.nupkg'
    publishVstsFeed: '97a41293-2972-4f48-8c0e-05493ae82010'
    allowPackageConflicts: true

- task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
  displayName: Perform Cleanup Tasks
  condition: always()

- task: PublishBuildArtifacts@1
  displayName: Publish MicroBuild Outputs
  inputs:
    PathtoPublish: '$(Build.StagingDirectory)\MicroBuild\Output'
    ArtifactName: '$(Build.BuildNumber)'
    publishLocation: Container
  condition: succeededOrFailed()
