// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

using System;
using System.ComponentModel.Composition;
using System.IO;

using Microsoft.VisualStudio.GraphModel;
using Microsoft.VisualStudio.GraphModel.Schemas;
using Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.GraphNodes.ViewProviders;
using Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.Snapshot;

namespace Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.GraphNodes.Actions
{
    internal abstract class GraphActionHandlerBase : IDependenciesGraphActionHandler
    {
        protected GraphActionHandlerBase(IDependenciesGraphBuilder builder,
                                      IAggregateDependenciesSnapshotProvider aggregateSnapshotProvider)
        {
            Builder = builder;
            AggregateSnapshotProvider = aggregateSnapshotProvider;
            ViewProviders = new OrderPrecedenceImportCollection<IDependenciesGraphViewProvider>(
                                    ImportOrderPrecedenceComparer.PreferenceOrder.PreferredComesFirst);
        }

        protected IDependenciesGraphBuilder Builder { get; }
        protected IAggregateDependenciesSnapshotProvider AggregateSnapshotProvider { get; }

        [ImportMany]
        protected OrderPrecedenceImportCollection<IDependenciesGraphViewProvider> ViewProviders { get; }

        public virtual bool CanHandleRequest(IGraphContext graphContext)
        {
            return false;
        }

        public virtual bool CanHandleChanges()
        {
            return false;
        }

        public virtual bool HandleRequest(IGraphContext graphContext)
        {
            return false;
        }

        public virtual bool HandleChanges(IGraphContext graphContext, SnapshotChangedEventArgs e)
        {
            return false;
        }

        protected IDependency GetDependency(GraphNode inputGraphNode, out IDependenciesSnapshot snapshot)
        {
            snapshot = null;

            string projectPath = inputGraphNode.Id.GetValue(CodeGraphNodeIdName.Assembly);
            if (string.IsNullOrWhiteSpace(projectPath))
            {
                return null;
            }

            string projectFolder = Path.GetDirectoryName(projectPath);
            if (projectFolder == null)
            {
                return null;
            }

            string id = inputGraphNode.GetValue<string>(DependenciesGraphSchema.DependencyIdProperty);
            if (id == null)
            {
                // this is top level node and it contains full path 
                id = inputGraphNode.Id.GetValue(CodeGraphNodeIdName.File);
                if (id == null)
                {
                    // No full path, so this must be a node generated by a different provider.
                    return null;
                }

                if (id.StartsWith(projectFolder, StringComparison.OrdinalIgnoreCase))
                {
                    int startIndex = projectFolder.Length;

                    // Trim backslashes (without allocating)
                    while (startIndex < id.Length && id[startIndex] == '\\')
                    {
                        startIndex++;
                    }

                    id = id.Substring(startIndex);
                }

                return GetTopLevelDependency(projectPath, id, out snapshot);
            }
            else
            {
                return GetDependency(projectPath, id, out snapshot);
            }
        }

        protected IDependency GetDependency(
            string projectPath,
            string dependencyId,
            out IDependenciesSnapshot snapshot)
        {
            snapshot = GetSnapshot(projectPath);
            return snapshot?.FindDependency(dependencyId);
        }

        protected IDependency GetTopLevelDependency(
            string projectPath,
            string dependencyId,
            out IDependenciesSnapshot snapshot)
        {
            snapshot = GetSnapshot(projectPath);
            return snapshot?.FindDependency(dependencyId, topLevel: true);
        }

        protected IDependenciesSnapshot GetSnapshot(string projectPath)
        {
            IDependenciesSnapshotProvider snapshotProvider = AggregateSnapshotProvider.GetSnapshotProvider(projectPath);
            return snapshotProvider?.CurrentSnapshot;
        }
    }
}
